generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}

model Runner {
  id               Int            @id @default(autoincrement())
  firstName        String
  lastName         String
  identification   String         @unique
  phoneNumber      String?
  facultyId        Int?
  registrationTime DateTime       @default(now())
  groupNumber      Int?
  testTime         String?
  firstYear        Boolean
  shoeSize         String         @default("0")
  laps             Lap[]
  queue            Queue[]
  reward1Collected Boolean        @default(false)
  reward2Collected Boolean        @default(false)
  reward3Collected Boolean        @default(false)
  shiftCheckIns    ShiftCheckIn[]
}

model Group {
  groupNumber Int    @id @default(autoincrement())
  groupName   String
}

model Faculty {
  id   Int    @id @default(autoincrement())
  name String
}

model Queue {
  id         Int    @id @default(autoincrement())
  queuePlace Int
  runnerId   Int
  runner     Runner @relation(fields: [runnerId], references: [id])
}

model Lap {
  id        Int      @id @default(autoincrement())
  runnerId  Int
  startTime DateTime
  time      String
  raining   Boolean

  runner Runner @relation(fields: [runnerId], references: [id])
}

model GlobalState {
  id      Int     @id @default(1) // Ensures there's only one row
  raining Boolean
}

model ShiftCheckIn {
  id        Int      @id @default(autoincrement())
  runnerId  Int
  timeSlot  String
  checkedIn Boolean  @default(false)
  createdAt DateTime @default(now())

  runner Runner @relation(fields: [runnerId], references: [id])

  @@unique([runnerId, timeSlot])
}
